diff --git a/SConstruct b/SConstruct
index 1ab42b6b90..6090b24c19 100644
--- a/SConstruct
+++ b/SConstruct
@@ -636,6 +636,15 @@ if selected_platform in platform_list:
                 env.module_icons_paths.append(path + "/" + "icons")
             modules_enabled[name] = path
 
+            if getattr(config, "has_custom_iterator", False) and config.has_custom_iterator():
+                env.AppendUnique(CPPDEFINES=["CUSTOM_ITERATOR"])
+
+            if getattr(config, "has_custom_physics_iterator", False) and config.has_custom_physics_iterator():
+                env.AppendUnique(CPPDEFINES=["CUSTOM_PHYSICS_ITERATOR"])
+
+            if getattr(config, "has_custom_audio_iterator", False) and config.has_custom_audio_iterator():
+                env.AppendUnique(CPPDEFINES=["CUSTOM_AUDIO_ITERATOR"])
+
         sys.path.remove(path)
         sys.modules.pop("config")
 
diff --git a/core/config/engine.h b/core/config/engine.h
index e6b5df2d5a..6b4126cfe3 100644
--- a/core/config/engine.h
+++ b/core/config/engine.h
@@ -91,8 +91,10 @@ public:
 
 	uint64_t get_frames_drawn();
 
+	void set_physics_frames(uint32_t p_physics_frames) { _physics_frames = p_physics_frames; }
 	uint64_t get_physics_frames() const { return _physics_frames; }
 	uint64_t get_process_frames() const { return _process_frames; }
+	void set_in_physics_frame(bool p_in_physics) { _in_physics = p_in_physics; }
 	bool is_in_physics_frame() const { return _in_physics; }
 	uint64_t get_frame_ticks() const { return _frame_ticks; }
 	double get_process_step() const { return _process_step; }
diff --git a/main/main.cpp b/main/main.cpp
index 6764332f16..dc30322255 100644
--- a/main/main.cpp
+++ b/main/main.cpp
@@ -1281,8 +1281,8 @@ Error Main::setup(const char *execpath, int argc, char *argv[], bool p_second_ph
 	}
 
 	/* todo restore
-    OS::get_singleton()->_allow_layered = GLOBAL_DEF("display/window/per_pixel_transparency/allowed", false);
-    video_mode.layered = GLOBAL_DEF("display/window/per_pixel_transparency/enabled", false);
+	OS::get_singleton()->_allow_layered = GLOBAL_DEF("display/window/per_pixel_transparency/allowed", false);
+	video_mode.layered = GLOBAL_DEF("display/window/per_pixel_transparency/enabled", false);
 */
 	if (editor || project_manager) {
 		// The editor and project manager always detect and use hiDPI if needed
@@ -2494,6 +2494,13 @@ bool Main::iteration() {
 
 	bool exit = false;
 
+#ifdef CUSTOM_ITERATOR
+	exit = custom_iteration(process_step, physics_step, &advance, time_scale);
+#endif
+
+#ifndef CUSTOM_PHYSICS_ITERATOR
+	Engine::get_singleton()->_in_physics = true;
+
 	for (int iters = 0; iters < advance.physics_steps; ++iters) {
 		if (Input::get_singleton()->is_using_input_buffering() && agile_input_event_flushing) {
 			Input::get_singleton()->flush_buffered_events();
@@ -2536,6 +2543,8 @@ bool Main::iteration() {
 	if (Input::get_singleton()->is_using_input_buffering() && agile_input_event_flushing) {
 		Input::get_singleton()->flush_buffered_events();
 	}
+	Engine::get_singleton()->_in_physics = false;
+#endif
 
 	uint64_t process_begin = OS::get_singleton()->get_ticks_usec();
 
@@ -2568,7 +2577,9 @@ bool Main::iteration() {
 		ScriptServer::get_language(i)->frame();
 	}
 
+#ifndef CUSTOM_AUDIO_ITERATOR
 	AudioServer::get_singleton()->update();
+#endif
 
 	if (EngineDebugger::is_active()) {
 		EngineDebugger::get_singleton()->iteration(frame_time, process_ticks, physics_process_ticks, physics_step);
diff --git a/main/main.h b/main/main.h
index 4911ff42b4..9441d7fc85 100644
--- a/main/main.h
+++ b/main/main.h
@@ -56,6 +56,9 @@ public:
 #endif
 	static bool start();
 
+#ifdef CUSTOM_ITERATOR
+	static bool custom_iteration(float p_process_delta, float p_physics_delta, struct MainFrameTime *p_frame_time, float p_time_scale);
+#endif
 	static bool iteration();
 	static void force_redraw();
 
