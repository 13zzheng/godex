#!/usr/bin/env python

import modules_builders
import os
import methods
import methods_ecs
from collections import OrderedDict

Import("env")
Import("env_ecs")

env_ecs_modules = env_ecs.Clone()

# Take all the modules under this directory
modules_detected = OrderedDict()

path = "."
modules_detected.update(methods.detect_modules(path))
include_path = os.path.dirname(path)
if include_path:
    env_ecs_modules.Prepend(CPPPATH=[include_path])

# TODO for now, by default all the modules are active. Add module deactivation
# later.

# Generate register modules file.
methods_ecs.generate_modules_register_file(modules_detected)

# Execute the modules SCsub.
for name, path in modules_detected.items():
    if not os.path.isabs(path):
        SConscript(name + "/SCsub")  # Built-in.
    else:
        SConscript(path + "/SCsub")  # Custom.

env_ecs.add_source_files(env.modules_sources, "ecs_modules_register.gen.cpp")
